name: Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create release (once)
    runs-on: ubuntu-latest
    steps:
      - name: Create or ensure release exists
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: key_logger
            asset_name: key_logger-macos-intel
            content_type: application/octet-stream
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: key_logger
            asset_name: key_logger-macos-apple
            content_type: application/octet-stream
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: key_logger.exe
            asset_name: key_logger-windows.exe
            content_type: application/octet-stream
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: key_logger
            asset_name: key_logger-linux
            content_type: application/octet-stream

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      - name: Install Linux dependencies
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }} -p key_logger

      - name: Prepare release asset
        shell: bash
        run: |
          mkdir -p release-assets
          cp ./target/${{ matrix.target }}/release/${{ matrix.binary_name }} release-assets/${{ matrix.asset_name }}

      - name: Upload asset to existing release
        run: gh release upload "${{ github.ref_name }}" "release-assets/${{ matrix.asset_name }}" --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
